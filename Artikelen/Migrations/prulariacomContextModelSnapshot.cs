// <auto-generated />
using System;
using Artikelen;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Artikelen.Migrations
{
    [DbContext(typeof(prulariacomContext))]
    partial class prulariacomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Artikelen.Actiecode", b =>
                {
                    b.Property<int>("ActiecodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("actiecodeId");

                    b.Property<DateTime>("GeldigTotDatum")
                        .HasColumnType("date")
                        .HasColumnName("geldigTotDatum");

                    b.Property<DateTime>("GeldigVanDatum")
                        .HasColumnType("date")
                        .HasColumnName("geldigVanDatum");

                    b.Property<bool>("IsEenmalig")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isEenmalig");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("ActiecodeId");

                    b.ToTable("actiecodes");
                });

            modelBuilder.Entity("Artikelen.Adressen", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adresId");

                    b.Property<bool?>("Actief")
                        .IsRequired()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("actief")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Bus")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("bus");

                    b.Property<string>("HuisNummer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("huisNummer");

                    b.Property<int>("PlaatsId")
                        .HasColumnType("int")
                        .HasColumnName("plaatsId");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("straat");

                    b.HasKey("AdresId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlaatsId" }, "fk_Adressen_Plaatsen_idx");

                    b.ToTable("adressen");
                });

            modelBuilder.Entity("Artikelen.Artikelcategorieen", b =>
                {
                    b.Property<int>("CategorieId")
                        .HasColumnType("int")
                        .HasColumnName("categorieId");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.HasKey("CategorieId", "ArtikelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_ArtikelCategorieen_Artikelen1_idx");

                    b.ToTable("artikelcategorieen");
                });

            modelBuilder.Entity("Artikelen.Artikelen", b =>
                {
                    b.Property<int>("ArtikelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<int>("AantalBesteldLeverancier")
                        .HasColumnType("int")
                        .HasColumnName("aantalBesteldLeverancier");

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("beschrijving");

                    b.Property<int>("Bestelpeil")
                        .HasColumnType("int")
                        .HasColumnName("bestelpeil");

                    b.Property<string>("Ean")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ean");

                    b.Property<int>("GewichtInGram")
                        .HasColumnType("int")
                        .HasColumnName("gewichtInGram");

                    b.Property<int>("Levertijd")
                        .HasColumnType("int")
                        .HasColumnName("levertijd")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("MaxAantalInMagazijnPlaats")
                        .HasColumnType("int")
                        .HasColumnName("maxAantalInMagazijnPLaats");

                    b.Property<int>("MaximumVoorraad")
                        .HasColumnType("int")
                        .HasColumnName("maximumVoorraad");

                    b.Property<int>("MinimumVoorraad")
                        .HasColumnType("int")
                        .HasColumnName("minimumVoorraad");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.Property<decimal>("Prijs")
                        .HasColumnType("decimal(18,5)")
                        .HasColumnName("prijs");

                    b.Property<int>("Voorraad")
                        .HasColumnType("int")
                        .HasColumnName("voorraad");

                    b.HasKey("ArtikelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Ean" }, "ean_UNIQUE")
                        .IsUnique();

                    b.ToTable("artikelen");
                });

            modelBuilder.Entity("Artikelen.Artikelleveranciersinfolijnen", b =>
                {
                    b.Property<int>("ArtikelLeveranciersInfoLijnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("artikelLeveranciersInfoLijnId");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<string>("Antwoord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("antwoord");

                    b.Property<string>("Vraag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vraag");

                    b.HasKey("ArtikelLeveranciersInfoLijnId", "ArtikelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_ArtikelLeveranciersInfoLijnen_Artikelen1_idx");

                    b.ToTable("artikelleveranciersinfolijnen");
                });

            modelBuilder.Entity("Artikelen.Bestellijnen", b =>
                {
                    b.Property<int>("BestellijnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bestellijnId");

                    b.Property<int>("AantalBesteld")
                        .HasColumnType("int")
                        .HasColumnName("aantalBesteld");

                    b.Property<int>("AantalGeannuleerd")
                        .HasColumnType("int")
                        .HasColumnName("aantalGeannuleerd");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<int>("BestelId")
                        .HasColumnType("int")
                        .HasColumnName("bestelId");

                    b.HasKey("BestellijnId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_Bestellijnen_Artikelen1_idx");

                    b.HasIndex(new[] { "BestelId" }, "fk_Bestellijnen_Bestellingen1_idx");

                    b.ToTable("bestellijnen");
                });

            modelBuilder.Entity("Artikelen.Bestellingen", b =>
                {
                    b.Property<int>("BestelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bestelId");

                    b.Property<bool>("ActiecodeGebruikt")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("actiecodeGebruikt");

                    b.Property<bool>("Annulatie")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("annulatie");

                    b.Property<DateTime?>("Annulatiedatum")
                        .HasColumnType("date")
                        .HasColumnName("annulatiedatum");

                    b.Property<string>("Bedrijfsnaam")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("bedrijfsnaam");

                    b.Property<DateTime>("Besteldatum")
                        .HasColumnType("datetime")
                        .HasColumnName("besteldatum");

                    b.Property<int>("BestellingsStatusId")
                        .HasColumnType("int")
                        .HasColumnName("bestellingsStatusId");

                    b.Property<bool>("Betaald")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("betaald");

                    b.Property<int>("BetaalwijzeId")
                        .HasColumnType("int")
                        .HasColumnName("betaalwijzeId");

                    b.Property<string>("Betalingscode")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("betalingscode");

                    b.Property<string>("BtwNummer")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("btwNummer");

                    b.Property<int>("FacturatieAdresId")
                        .HasColumnType("int")
                        .HasColumnName("facturatieAdresId");

                    b.Property<string>("Familienaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("familienaam");

                    b.Property<int>("KlantId")
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<int>("LeveringsAdresId")
                        .HasColumnType("int")
                        .HasColumnName("leveringsAdresId");

                    b.Property<string>("Terugbetalingscode")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("terugbetalingscode");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voornaam");

                    b.HasKey("BestelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FacturatieAdresId" }, "fk_Bestellingen_Adressen1_idx");

                    b.HasIndex(new[] { "LeveringsAdresId" }, "fk_Bestellingen_Adressen2_idx");

                    b.HasIndex(new[] { "BestellingsStatusId" }, "fk_Bestellingen_BestellingsStatussen1_idx");

                    b.HasIndex(new[] { "BetaalwijzeId" }, "fk_Bestellingen_Betaalwijzes1_idx");

                    b.HasIndex(new[] { "KlantId" }, "fk_Bestellingen_Klanten1_idx");

                    b.ToTable("bestellingen");
                });

            modelBuilder.Entity("Artikelen.Bestellingsstatussen", b =>
                {
                    b.Property<int>("BestellingsStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bestellingsStatusId");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("BestellingsStatusId")
                        .HasName("PRIMARY");

                    b.ToTable("bestellingsstatussen");
                });

            modelBuilder.Entity("Artikelen.Betaalwijze", b =>
                {
                    b.Property<int>("BetaalwijzeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("betaalwijzeId");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("BetaalwijzeId");

                    b.ToTable("betaalwijzes");
                });

            modelBuilder.Entity("Artikelen.Categorieen", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categorieId");

                    b.Property<int?>("HoofdCategorieId")
                        .HasColumnType("int")
                        .HasColumnName("hoofdCategorieId");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("CategorieId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HoofdCategorieId" }, "fk_Categorieen_Categorieen1_idx");

                    b.ToTable("categorieen");
                });

            modelBuilder.Entity("Artikelen.Chatgesprekken", b =>
                {
                    b.Property<int>("ChatgesprekId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chatgesprekId");

                    b.Property<int>("GebruikersAccountId")
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId");

                    b.HasKey("ChatgesprekId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GebruikersAccountId" }, "fk_ChatGesprekken_GebruikersAccounts1_idx");

                    b.ToTable("chatgesprekken");
                });

            modelBuilder.Entity("Artikelen.Chatgespreklijnen", b =>
                {
                    b.Property<int>("ChatgesprekLijnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chatgesprekLijnId");

                    b.Property<string>("Bericht")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bericht");

                    b.Property<int>("ChatgesprekId")
                        .HasColumnType("int")
                        .HasColumnName("chatgesprekId");

                    b.Property<int?>("GebruikersAccountId")
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("PersoneelslidAccountId")
                        .HasColumnType("int")
                        .HasColumnName("personeelslidAccountId")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("ChatgesprekLijnId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatgesprekId" }, "fk_ChatgesprekLijnen_ChatGesprekken1_idx");

                    b.HasIndex(new[] { "GebruikersAccountId" }, "fk_ChatgesprekLijnen_GebruikersAccounts1_idx");

                    b.HasIndex(new[] { "PersoneelslidAccountId" }, "fk_ChatgesprekLijnen_PersoneelslidAccounts1_idx");

                    b.ToTable("chatgespreklijnen");
                });

            modelBuilder.Entity("Artikelen.Contactpersonen", b =>
                {
                    b.Property<int>("ContactpersoonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contactpersoonId");

                    b.Property<string>("Familienaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("familienaam");

                    b.Property<string>("Functie")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("functie");

                    b.Property<int>("GebruikersAccountId")
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId");

                    b.Property<int>("KlantId")
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voornaam");

                    b.HasKey("ContactpersoonId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GebruikersAccountId" }, "fk_Contactpersonen_GebruikersAccounts_idx");

                    b.HasIndex(new[] { "KlantId" }, "fk_Contactpersonen_Rechtspersonen1_idx");

                    b.ToTable("contactpersonen");
                });

            modelBuilder.Entity("Artikelen.Eventmessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("message");

                    b.HasKey("Id");

                    b.ToTable("eventmessages");
                });

            modelBuilder.Entity("Artikelen.Eventwachtrijartikelen", b =>
                {
                    b.Property<int>("ArtikelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<int>("Aantal")
                        .HasColumnType("int")
                        .HasColumnName("aantal");

                    b.Property<int>("MaxAantalInMagazijnPlaats")
                        .HasColumnType("int")
                        .HasColumnName("maxAantalInMagazijnPlaats");

                    b.HasKey("ArtikelId")
                        .HasName("PRIMARY");

                    b.ToTable("eventwachtrijartikelen");
                });

            modelBuilder.Entity("Artikelen.Gebruikersaccount", b =>
                {
                    b.Property<int>("GebruikersAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disabled");

                    b.Property<string>("Emailadres")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("emailadres");

                    b.Property<string>("Paswoord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paswoord");

                    b.HasKey("GebruikersAccountId");

                    b.HasIndex(new[] { "Emailadres" }, "gebrukersnaam_UNIQUE")
                        .IsUnique();

                    b.ToTable("gebruikersaccounts");
                });

            modelBuilder.Entity("Artikelen.Inkomendeleveringen", b =>
                {
                    b.Property<int>("InkomendeLeveringsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inkomendeLeveringsId");

                    b.Property<DateTime>("LeverDatum")
                        .HasColumnType("date")
                        .HasColumnName("leverDatum");

                    b.Property<int>("LeveranciersId")
                        .HasColumnType("int")
                        .HasColumnName("leveranciersId");

                    b.Property<string>("LeveringsbonNummer")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("leveringsbonNummer");

                    b.Property<DateTime>("Leveringsbondatum")
                        .HasColumnType("date")
                        .HasColumnName("leveringsbondatum");

                    b.Property<int>("OntvangerPersoneelslidId")
                        .HasColumnType("int")
                        .HasColumnName("ontvangerPersoneelslidId");

                    b.HasKey("InkomendeLeveringsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LeveranciersId" }, "fk_InkomendeLeveringen_Leveranciers1");

                    b.HasIndex(new[] { "OntvangerPersoneelslidId" }, "fk_InkomendeLeveringen_Personeelsleden1_idx");

                    b.ToTable("inkomendeleveringen");
                });

            modelBuilder.Entity("Artikelen.Inkomendeleveringslijnen", b =>
                {
                    b.Property<int>("InkomendeLeveringsId")
                        .HasColumnType("int")
                        .HasColumnName("inkomendeLeveringsId");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<int>("MagazijnPlaatsId")
                        .HasColumnType("int")
                        .HasColumnName("magazijnPlaatsId");

                    b.Property<int>("AantalGoedgekeurd")
                        .HasColumnType("int")
                        .HasColumnName("aantalGoedgekeurd");

                    b.Property<int>("AantalTeruggestuurd")
                        .HasColumnType("int")
                        .HasColumnName("aantalTeruggestuurd");

                    b.HasKey("InkomendeLeveringsId", "ArtikelId", "MagazijnPlaatsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_InkomendeLeveringsLijnen_Artikelen1_idx");

                    b.HasIndex(new[] { "MagazijnPlaatsId" }, "fk_InkomendeLeveringsLijnen_MagazijnPlaatsen1_idx");

                    b.ToTable("inkomendeleveringslijnen");
                });

            modelBuilder.Entity("Artikelen.Klanten", b =>
                {
                    b.Property<int>("KlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<int>("FacturatieAdresId")
                        .HasColumnType("int")
                        .HasColumnName("facturatieAdresId");

                    b.Property<int>("LeveringsAdresId")
                        .HasColumnType("int")
                        .HasColumnName("leveringsAdresId");

                    b.HasKey("KlantId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FacturatieAdresId" }, "fk_Klanten_Adressen1_idx");

                    b.HasIndex(new[] { "LeveringsAdresId" }, "fk_Klanten_Adressen2_idx");

                    b.ToTable("klanten");
                });

            modelBuilder.Entity("Artikelen.Klantenreview", b =>
                {
                    b.Property<int>("KlantenReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("klantenReviewId");

                    b.Property<int>("BestellijnId")
                        .HasColumnType("int")
                        .HasColumnName("bestellijnId");

                    b.Property<string>("Commentaar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("commentaar");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("date")
                        .HasColumnName("datum");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nickname");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("KlantenReviewId");

                    b.HasIndex(new[] { "BestellijnId" }, "fk_KlantenReviews_Bestellijnen1_idx");

                    b.ToTable("klantenreviews");
                });

            modelBuilder.Entity("Artikelen.Leverancier", b =>
                {
                    b.Property<int>("LeveranciersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leveranciersId");

                    b.Property<string>("BtwNummer")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("btwNummer");

                    b.Property<string>("Bus")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("bus");

                    b.Property<string>("FamilienaamContactpersoon")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("familienaamContactpersoon");

                    b.Property<string>("HuisNummer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("huisNummer");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.Property<int>("PlaatsId")
                        .HasColumnType("int")
                        .HasColumnName("plaatsId");

                    b.Property<string>("Straat")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("straat");

                    b.Property<string>("VoornaamContactpersoon")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voornaamContactpersoon");

                    b.HasKey("LeveranciersId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlaatsId" }, "fk_Leveranciers_Plaatsen1_idx");

                    b.ToTable("leveranciers");
                });

            modelBuilder.Entity("Artikelen.Magazijnplaatsen", b =>
                {
                    b.Property<int>("MagazijnPlaatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("magazijnPlaatsId");

                    b.Property<int>("Aantal")
                        .HasColumnType("int")
                        .HasColumnName("aantal");

                    b.Property<int?>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<int>("Rek")
                        .HasColumnType("int")
                        .HasColumnName("rek");

                    b.Property<string>("Rij")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("rij")
                        .IsFixedLength(true);

                    b.HasKey("MagazijnPlaatsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_MagazijnPlaatsen_Artikelen1_idx");

                    b.HasIndex(new[] { "Rij", "Rek" }, "uinx_rijrek")
                        .IsUnique();

                    b.ToTable("magazijnplaatsen");
                });

            modelBuilder.Entity("Artikelen.Natuurlijkepersonen", b =>
                {
                    b.Property<int>("KlantId")
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<string>("Familienaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("familienaam");

                    b.Property<int>("GebruikersAccountId")
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voornaam");

                    b.HasKey("KlantId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GebruikersAccountId" }, "fk_NatuurlijkePersonen_gebruikersAccountId_idx");

                    b.HasIndex(new[] { "KlantId" }, "fk_PrivateKlanten_Klanten1_idx");

                    b.ToTable("natuurlijkepersonen");
                });

            modelBuilder.Entity("Artikelen.Personeelsleden", b =>
                {
                    b.Property<int>("PersoneelslidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personeelslidId");

                    b.Property<string>("Familienaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("familienaam");

                    b.Property<bool?>("InDienst")
                        .IsRequired()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("inDienst")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PersoneelslidAccountId")
                        .HasColumnType("int")
                        .HasColumnName("personeelslidAccountId");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("voornaam");

                    b.HasKey("PersoneelslidId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PersoneelslidAccountId" }, "fk_Personeelsleden_PersoneelslidAccounts1_idx");

                    b.ToTable("personeelsleden");
                });

            modelBuilder.Entity("Artikelen.Personeelslidaccount", b =>
                {
                    b.Property<int>("PersoneelslidAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("personeelslidAccountId");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disabled");

                    b.Property<string>("Emailadres")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("emailadres");

                    b.Property<string>("Paswoord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("paswoord");

                    b.HasKey("PersoneelslidAccountId");

                    b.HasIndex(new[] { "Emailadres" }, "emailadres_UNIQUE")
                        .IsUnique();

                    b.ToTable("personeelslidaccounts");
                });

            modelBuilder.Entity("Artikelen.Personeelslidsecuritygroepen", b =>
                {
                    b.Property<int>("PersoneelslidId")
                        .HasColumnType("int")
                        .HasColumnName("personeelslidId");

                    b.Property<int>("SecurityGroepId")
                        .HasColumnType("int")
                        .HasColumnName("securityGroepId");

                    b.HasKey("PersoneelslidId", "SecurityGroepId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SecurityGroepId" }, "fk_PersoneelslidSecurityGroepen_SecurityGroepen1_idx");

                    b.ToTable("personeelslidsecuritygroepen");
                });

            modelBuilder.Entity("Artikelen.Plaatsen", b =>
                {
                    b.Property<int>("PlaatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("plaatsId");

                    b.Property<string>("Plaats")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("plaats");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("postcode");

                    b.HasKey("PlaatsId")
                        .HasName("PRIMARY");

                    b.ToTable("plaatsen");
                });

            modelBuilder.Entity("Artikelen.Rechtspersonen", b =>
                {
                    b.Property<int>("KlantId")
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<string>("BtwNummer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("btwNummer");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("KlantId")
                        .HasName("PRIMARY");

                    b.ToTable("rechtspersonen");
                });

            modelBuilder.Entity("Artikelen.Securitygroepen", b =>
                {
                    b.Property<int>("SecurityGroepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("securityGroepId");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("SecurityGroepId")
                        .HasName("PRIMARY");

                    b.ToTable("securitygroepen");
                });

            modelBuilder.Entity("Artikelen.Uitgaandeleveringen", b =>
                {
                    b.Property<int>("UitgaandeLeveringsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uitgaandeLeveringsId");

                    b.Property<DateTime?>("AankomstDatum")
                        .HasColumnType("date")
                        .HasColumnName("aankomstDatum");

                    b.Property<int>("BestelId")
                        .HasColumnType("int")
                        .HasColumnName("bestelId");

                    b.Property<int>("KlantId")
                        .HasColumnType("int")
                        .HasColumnName("klantId");

                    b.Property<string>("Trackingcode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("trackingcode");

                    b.Property<int>("UitgaandeLeveringsStatusId")
                        .HasColumnType("int")
                        .HasColumnName("uitgaandeLeveringsStatusId");

                    b.Property<DateTime>("VertrekDatum")
                        .HasColumnType("date")
                        .HasColumnName("vertrekDatum");

                    b.HasKey("UitgaandeLeveringsId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BestelId" }, "fk_UitgaandeLeveringen_Bestellingen1_idx");

                    b.HasIndex(new[] { "KlantId" }, "fk_UitgaandeLeveringen_Klanten1_idx");

                    b.HasIndex(new[] { "UitgaandeLeveringsStatusId" }, "fk_UitgaandeLeveringen_UitgaandeLeveringsStatussn1_idx");

                    b.ToTable("uitgaandeleveringen");
                });

            modelBuilder.Entity("Artikelen.Uitgaandeleveringsstatussen", b =>
                {
                    b.Property<int>("UitgaandeLeveringsStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uitgaandeLeveringsStatusId");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("naam");

                    b.HasKey("UitgaandeLeveringsStatusId")
                        .HasName("PRIMARY");

                    b.ToTable("uitgaandeleveringsstatussen");
                });

            modelBuilder.Entity("Artikelen.Veelgesteldevragenartikel", b =>
                {
                    b.Property<int>("VeelgesteldeVragenArtikelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("veelgesteldeVragenArtikelId");

                    b.Property<string>("Antwoord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("antwoord");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<string>("Vraag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vraag");

                    b.HasKey("VeelgesteldeVragenArtikelId");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_VeelgesteldeVragenArtikels_Artikelen1_idx");

                    b.ToTable("veelgesteldevragenartikels");
                });

            modelBuilder.Entity("Artikelen.Wishlistitem", b =>
                {
                    b.Property<int>("WishListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wishListItemId");

                    b.Property<int>("GebruikersAccountId")
                        .HasColumnType("int")
                        .HasColumnName("gebruikersAccountId");

                    b.Property<int>("Aantal")
                        .HasColumnType("int")
                        .HasColumnName("aantal")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime>("AanvraagDatum")
                        .HasColumnType("date")
                        .HasColumnName("aanvraagDatum");

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int")
                        .HasColumnName("artikelId");

                    b.Property<DateTime?>("EmailGestuurdDatum")
                        .HasColumnType("date")
                        .HasColumnName("emailGestuurdDatum");

                    b.HasKey("WishListItemId", "GebruikersAccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ArtikelId" }, "fk_WishListItems_Artikelen1_idx");

                    b.HasIndex(new[] { "GebruikersAccountId" }, "fk_WishListItems_GebruikersAccounts1_idx");

                    b.ToTable("wishlistitems");
                });

            modelBuilder.Entity("Artikelen.Adressen", b =>
                {
                    b.HasOne("Artikelen.Plaatsen", "Plaats")
                        .WithMany("Adressens")
                        .HasForeignKey("PlaatsId")
                        .HasConstraintName("fk_Adressen_Plaatsen")
                        .IsRequired();

                    b.Navigation("Plaats");
                });

            modelBuilder.Entity("Artikelen.Artikelcategorieen", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Artikelcategorieens")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_ArtikelCategorieen_Artikelen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Categorieen", "Categorie")
                        .WithMany("Artikelcategorieens")
                        .HasForeignKey("CategorieId")
                        .HasConstraintName("fk_ArtikelCategorieen_Categorieen1")
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("Artikelen.Artikelleveranciersinfolijnen", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Artikelleveranciersinfolijnens")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_ArtikelLeveranciersInfoLijnen_Artikelen1")
                        .IsRequired();

                    b.Navigation("Artikel");
                });

            modelBuilder.Entity("Artikelen.Bestellijnen", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Bestellijnens")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_Bestellijnen_Artikelen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Bestellingen", "Bestel")
                        .WithMany("Bestellijnens")
                        .HasForeignKey("BestelId")
                        .HasConstraintName("fk_Bestellijnen_Bestellingen1")
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Bestel");
                });

            modelBuilder.Entity("Artikelen.Bestellingen", b =>
                {
                    b.HasOne("Artikelen.Bestellingsstatussen", "BestellingsStatus")
                        .WithMany("Bestellingens")
                        .HasForeignKey("BestellingsStatusId")
                        .HasConstraintName("fk_Bestellingen_BestellingsStatussen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Betaalwijze", "Betaalwijze")
                        .WithMany("Bestellingens")
                        .HasForeignKey("BetaalwijzeId")
                        .HasConstraintName("fk_Bestellingen_Betaalwijzes1")
                        .IsRequired();

                    b.HasOne("Artikelen.Adressen", "FacturatieAdres")
                        .WithMany("BestellingenFacturatieAdres")
                        .HasForeignKey("FacturatieAdresId")
                        .HasConstraintName("fk_Bestellingen_Adressen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Klanten", "Klant")
                        .WithMany("Bestellingens")
                        .HasForeignKey("KlantId")
                        .HasConstraintName("fk_Bestellingen_Klanten1")
                        .IsRequired();

                    b.HasOne("Artikelen.Adressen", "LeveringsAdres")
                        .WithMany("BestellingenLeveringsAdres")
                        .HasForeignKey("LeveringsAdresId")
                        .HasConstraintName("fk_Bestellingen_Adressen2")
                        .IsRequired();

                    b.Navigation("BestellingsStatus");

                    b.Navigation("Betaalwijze");

                    b.Navigation("FacturatieAdres");

                    b.Navigation("Klant");

                    b.Navigation("LeveringsAdres");
                });

            modelBuilder.Entity("Artikelen.Categorieen", b =>
                {
                    b.HasOne("Artikelen.Categorieen", "HoofdCategorie")
                        .WithMany("InverseHoofdCategorie")
                        .HasForeignKey("HoofdCategorieId")
                        .HasConstraintName("fk_Categorieen_Categorieen1");

                    b.Navigation("HoofdCategorie");
                });

            modelBuilder.Entity("Artikelen.Chatgesprekken", b =>
                {
                    b.HasOne("Artikelen.Gebruikersaccount", "GebruikersAccount")
                        .WithMany("Chatgesprekkens")
                        .HasForeignKey("GebruikersAccountId")
                        .HasConstraintName("fk_ChatGesprekken_GebruikersAccounts1")
                        .IsRequired();

                    b.Navigation("GebruikersAccount");
                });

            modelBuilder.Entity("Artikelen.Chatgespreklijnen", b =>
                {
                    b.HasOne("Artikelen.Chatgesprekken", "Chatgesprek")
                        .WithMany("Chatgespreklijnens")
                        .HasForeignKey("ChatgesprekId")
                        .HasConstraintName("fk_ChatgesprekLijnen_ChatGesprekken1")
                        .IsRequired();

                    b.HasOne("Artikelen.Gebruikersaccount", "GebruikersAccount")
                        .WithMany("Chatgespreklijnens")
                        .HasForeignKey("GebruikersAccountId")
                        .HasConstraintName("fk_ChatgesprekLijnen_GebruikersAccounts1");

                    b.HasOne("Artikelen.Personeelslidaccount", "PersoneelslidAccount")
                        .WithMany("Chatgespreklijnens")
                        .HasForeignKey("PersoneelslidAccountId")
                        .HasConstraintName("fk_ChatgesprekLijnen_PersoneelslidAccounts1");

                    b.Navigation("Chatgesprek");

                    b.Navigation("GebruikersAccount");

                    b.Navigation("PersoneelslidAccount");
                });

            modelBuilder.Entity("Artikelen.Contactpersonen", b =>
                {
                    b.HasOne("Artikelen.Gebruikersaccount", "GebruikersAccount")
                        .WithMany("Contactpersonens")
                        .HasForeignKey("GebruikersAccountId")
                        .HasConstraintName("fk_Contactpersonen_GebruikersAccounts1")
                        .IsRequired();

                    b.HasOne("Artikelen.Rechtspersonen", "Klant")
                        .WithMany("Contactpersonens")
                        .HasForeignKey("KlantId")
                        .HasConstraintName("fk_Contactpersonen_Rechtspersonen1")
                        .IsRequired();

                    b.Navigation("GebruikersAccount");

                    b.Navigation("Klant");
                });

            modelBuilder.Entity("Artikelen.Inkomendeleveringen", b =>
                {
                    b.HasOne("Artikelen.Leverancier", "Leveranciers")
                        .WithMany("Inkomendeleveringens")
                        .HasForeignKey("LeveranciersId")
                        .HasConstraintName("fk_InkomendeLeveringen_Leveranciers1")
                        .IsRequired();

                    b.HasOne("Artikelen.Personeelsleden", "OntvangerPersoneelslid")
                        .WithMany("Inkomendeleveringens")
                        .HasForeignKey("OntvangerPersoneelslidId")
                        .HasConstraintName("fk_InkomendeLeveringen_Personeelsleden1")
                        .IsRequired();

                    b.Navigation("Leveranciers");

                    b.Navigation("OntvangerPersoneelslid");
                });

            modelBuilder.Entity("Artikelen.Inkomendeleveringslijnen", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Inkomendeleveringslijnens")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_InkomendeLeveringsLijnen_Artikelen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Inkomendeleveringen", "InkomendeLeverings")
                        .WithMany("Inkomendeleveringslijnens")
                        .HasForeignKey("InkomendeLeveringsId")
                        .HasConstraintName("fk_InkomendeLeveringsLijnen_InkomendeLeveringen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Magazijnplaatsen", "MagazijnPlaats")
                        .WithMany("Inkomendeleveringslijnens")
                        .HasForeignKey("MagazijnPlaatsId")
                        .HasConstraintName("fk_InkomendeLeveringsLijnen_MagazijnPlaatsen1")
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("InkomendeLeverings");

                    b.Navigation("MagazijnPlaats");
                });

            modelBuilder.Entity("Artikelen.Klanten", b =>
                {
                    b.HasOne("Artikelen.Adressen", "FacturatieAdres")
                        .WithMany("KlantenFacturatieAdres")
                        .HasForeignKey("FacturatieAdresId")
                        .HasConstraintName("fk_Klanten_Adressen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Adressen", "LeveringsAdres")
                        .WithMany("KlantenLeveringsAdres")
                        .HasForeignKey("LeveringsAdresId")
                        .HasConstraintName("fk_Klanten_Adressen2")
                        .IsRequired();

                    b.Navigation("FacturatieAdres");

                    b.Navigation("LeveringsAdres");
                });

            modelBuilder.Entity("Artikelen.Klantenreview", b =>
                {
                    b.HasOne("Artikelen.Bestellijnen", "Bestellijn")
                        .WithMany("Klantenreviews")
                        .HasForeignKey("BestellijnId")
                        .HasConstraintName("fk_KlantenReviews_Bestellijnen1")
                        .IsRequired();

                    b.Navigation("Bestellijn");
                });

            modelBuilder.Entity("Artikelen.Leverancier", b =>
                {
                    b.HasOne("Artikelen.Plaatsen", "Plaats")
                        .WithMany("Leveranciers")
                        .HasForeignKey("PlaatsId")
                        .HasConstraintName("fk_Leveranciers_Plaatsen1")
                        .IsRequired();

                    b.Navigation("Plaats");
                });

            modelBuilder.Entity("Artikelen.Magazijnplaatsen", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Magazijnplaatsens")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_MagazijnPlaatsen_Artikelen1");

                    b.Navigation("Artikel");
                });

            modelBuilder.Entity("Artikelen.Natuurlijkepersonen", b =>
                {
                    b.HasOne("Artikelen.Gebruikersaccount", "GebruikersAccount")
                        .WithMany("Natuurlijkepersonens")
                        .HasForeignKey("GebruikersAccountId")
                        .HasConstraintName("fk_NatuurlijkePersonen_Gebruikersnamen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Klanten", "Klant")
                        .WithOne("Natuurlijkepersonen")
                        .HasForeignKey("Artikelen.Natuurlijkepersonen", "KlantId")
                        .HasConstraintName("fk_PrivateKlanten_Klanten1")
                        .IsRequired();

                    b.Navigation("GebruikersAccount");

                    b.Navigation("Klant");
                });

            modelBuilder.Entity("Artikelen.Personeelsleden", b =>
                {
                    b.HasOne("Artikelen.Personeelslidaccount", "PersoneelslidAccount")
                        .WithMany("Personeelsledens")
                        .HasForeignKey("PersoneelslidAccountId")
                        .HasConstraintName("fk_Personeelsleden_PersoneelslidAccounts1")
                        .IsRequired();

                    b.Navigation("PersoneelslidAccount");
                });

            modelBuilder.Entity("Artikelen.Personeelslidsecuritygroepen", b =>
                {
                    b.HasOne("Artikelen.Personeelsleden", "Personeelslid")
                        .WithMany("Personeelslidsecuritygroepens")
                        .HasForeignKey("PersoneelslidId")
                        .HasConstraintName("fk_PersoneelslidSecurityGroepen_Personeelsleden1")
                        .IsRequired();

                    b.HasOne("Artikelen.Securitygroepen", "SecurityGroep")
                        .WithMany("Personeelslidsecuritygroepens")
                        .HasForeignKey("SecurityGroepId")
                        .HasConstraintName("fk_PersoneelslidSecurityGroepen_SecurityGroepen1")
                        .IsRequired();

                    b.Navigation("Personeelslid");

                    b.Navigation("SecurityGroep");
                });

            modelBuilder.Entity("Artikelen.Rechtspersonen", b =>
                {
                    b.HasOne("Artikelen.Klanten", "Klant")
                        .WithOne("Rechtspersonen")
                        .HasForeignKey("Artikelen.Rechtspersonen", "KlantId")
                        .HasConstraintName("fk_Rechtspersonen_Klanten1")
                        .IsRequired();

                    b.Navigation("Klant");
                });

            modelBuilder.Entity("Artikelen.Uitgaandeleveringen", b =>
                {
                    b.HasOne("Artikelen.Bestellingen", "Bestel")
                        .WithMany("Uitgaandeleveringens")
                        .HasForeignKey("BestelId")
                        .HasConstraintName("fk_UitgaandeLeveringen_Bestellingen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Klanten", "Klant")
                        .WithMany("Uitgaandeleveringens")
                        .HasForeignKey("KlantId")
                        .HasConstraintName("fk_UitgaandeLeveringen_Klanten1")
                        .IsRequired();

                    b.HasOne("Artikelen.Uitgaandeleveringsstatussen", "UitgaandeLeveringsStatus")
                        .WithMany("Uitgaandeleveringens")
                        .HasForeignKey("UitgaandeLeveringsStatusId")
                        .HasConstraintName("fk_UitgaandeLeveringen_UitgaandeLeveringsStatussn1")
                        .IsRequired();

                    b.Navigation("Bestel");

                    b.Navigation("Klant");

                    b.Navigation("UitgaandeLeveringsStatus");
                });

            modelBuilder.Entity("Artikelen.Veelgesteldevragenartikel", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Veelgesteldevragenartikels")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_VeelgesteldeVragenArtikels_Artikelen1")
                        .IsRequired();

                    b.Navigation("Artikel");
                });

            modelBuilder.Entity("Artikelen.Wishlistitem", b =>
                {
                    b.HasOne("Artikelen.Artikelen", "Artikel")
                        .WithMany("Wishlistitems")
                        .HasForeignKey("ArtikelId")
                        .HasConstraintName("fk_WishListItems_Artikelen1")
                        .IsRequired();

                    b.HasOne("Artikelen.Gebruikersaccount", "GebruikersAccount")
                        .WithMany("Wishlistitems")
                        .HasForeignKey("GebruikersAccountId")
                        .HasConstraintName("fk_WishListItems_GebruikersAccounts1")
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("GebruikersAccount");
                });

            modelBuilder.Entity("Artikelen.Adressen", b =>
                {
                    b.Navigation("BestellingenFacturatieAdres");

                    b.Navigation("BestellingenLeveringsAdres");

                    b.Navigation("KlantenFacturatieAdres");

                    b.Navigation("KlantenLeveringsAdres");
                });

            modelBuilder.Entity("Artikelen.Artikelen", b =>
                {
                    b.Navigation("Artikelcategorieens");

                    b.Navigation("Artikelleveranciersinfolijnens");

                    b.Navigation("Bestellijnens");

                    b.Navigation("Inkomendeleveringslijnens");

                    b.Navigation("Magazijnplaatsens");

                    b.Navigation("Veelgesteldevragenartikels");

                    b.Navigation("Wishlistitems");
                });

            modelBuilder.Entity("Artikelen.Bestellijnen", b =>
                {
                    b.Navigation("Klantenreviews");
                });

            modelBuilder.Entity("Artikelen.Bestellingen", b =>
                {
                    b.Navigation("Bestellijnens");

                    b.Navigation("Uitgaandeleveringens");
                });

            modelBuilder.Entity("Artikelen.Bestellingsstatussen", b =>
                {
                    b.Navigation("Bestellingens");
                });

            modelBuilder.Entity("Artikelen.Betaalwijze", b =>
                {
                    b.Navigation("Bestellingens");
                });

            modelBuilder.Entity("Artikelen.Categorieen", b =>
                {
                    b.Navigation("Artikelcategorieens");

                    b.Navigation("InverseHoofdCategorie");
                });

            modelBuilder.Entity("Artikelen.Chatgesprekken", b =>
                {
                    b.Navigation("Chatgespreklijnens");
                });

            modelBuilder.Entity("Artikelen.Gebruikersaccount", b =>
                {
                    b.Navigation("Chatgesprekkens");

                    b.Navigation("Chatgespreklijnens");

                    b.Navigation("Contactpersonens");

                    b.Navigation("Natuurlijkepersonens");

                    b.Navigation("Wishlistitems");
                });

            modelBuilder.Entity("Artikelen.Inkomendeleveringen", b =>
                {
                    b.Navigation("Inkomendeleveringslijnens");
                });

            modelBuilder.Entity("Artikelen.Klanten", b =>
                {
                    b.Navigation("Bestellingens");

                    b.Navigation("Natuurlijkepersonen");

                    b.Navigation("Rechtspersonen");

                    b.Navigation("Uitgaandeleveringens");
                });

            modelBuilder.Entity("Artikelen.Leverancier", b =>
                {
                    b.Navigation("Inkomendeleveringens");
                });

            modelBuilder.Entity("Artikelen.Magazijnplaatsen", b =>
                {
                    b.Navigation("Inkomendeleveringslijnens");
                });

            modelBuilder.Entity("Artikelen.Personeelsleden", b =>
                {
                    b.Navigation("Inkomendeleveringens");

                    b.Navigation("Personeelslidsecuritygroepens");
                });

            modelBuilder.Entity("Artikelen.Personeelslidaccount", b =>
                {
                    b.Navigation("Chatgespreklijnens");

                    b.Navigation("Personeelsledens");
                });

            modelBuilder.Entity("Artikelen.Plaatsen", b =>
                {
                    b.Navigation("Adressens");

                    b.Navigation("Leveranciers");
                });

            modelBuilder.Entity("Artikelen.Rechtspersonen", b =>
                {
                    b.Navigation("Contactpersonens");
                });

            modelBuilder.Entity("Artikelen.Securitygroepen", b =>
                {
                    b.Navigation("Personeelslidsecuritygroepens");
                });

            modelBuilder.Entity("Artikelen.Uitgaandeleveringsstatussen", b =>
                {
                    b.Navigation("Uitgaandeleveringens");
                });
#pragma warning restore 612, 618
        }
    }
}
